<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: React-native | wlog]]></title>
  <link href="http://whhotw.github.io/blog/categories/react-native/atom.xml" rel="self"/>
  <link href="http://whhotw.github.io/"/>
  <updated>2018-04-16T13:52:05+08:00</updated>
  <id>http://whhotw.github.io/</id>
  <author>
    <name><![CDATA[w]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RN WebView of Android Release Build Load Local HTML]]></title>
    <link href="http://whhotw.github.io/blog/2018/04/16/rn-webview-of-android-release-build-load-local-html/"/>
    <updated>2018-04-16T11:52:04+08:00</updated>
    <id>http://whhotw.github.io/blog/2018/04/16/rn-webview-of-android-release-build-load-local-html</id>
    <content type="html"><![CDATA[<p><code>RN</code> 中的 WebView 可以使用 <code>require()</code> 讀取靜態的 HTML 檔案。但是安卓的 <code>release</code> 階段要用 <code>file:///android_asset/xxx</code> 的寫法，否則會無法正常執行</p>

<p>靜態檔案放在 android project 的 assets 底下</p>

<p><img src="/assets/ScreenShot2018-04-16at1157.png" width="1080" height="1920"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keyboard Issues With React-native-gifted-chat]]></title>
    <link href="http://whhotw.github.io/blog/2018/04/03/keyboard-issues-with-react-native-gifted-chat/"/>
    <updated>2018-04-03T14:13:35+08:00</updated>
    <id>http://whhotw.github.io/blog/2018/04/03/keyboard-issues-with-react-native-gifted-chat</id>
    <content type="html"><![CDATA[<p>使用 <code>react-native-gifted-chat</code> 假如有同時使用 <code>react-native-keyboard-manager</code> 在設定的時候記得 <code>setEnable(false)</code></p>

<pre><code>if (Platform.OS === 'ios') {
  if (__DEV__) {
    KeyboardManager.setEnableDebugging(true);
  }

  KeyboardManager.setEnable(false); // do not using it's
  KeyboardManager.setKeyboardDistanceFromTextField(10);
  KeyboardManager.setPreventShowingBottomBlankSpace(true);
  KeyboardManager.setEnableAutoToolbar(true);
  KeyboardManager.setToolbarManageBehaviour(0);
  KeyboardManager.setShouldToolbarUsesTextFieldTintColor(false);
  KeyboardManager.setToolbarPreviousNextButtonEnable(true);
  KeyboardManager.setShouldShowTextFieldPlaceholder(true);
  KeyboardManager.setOverrideKeyboardAppearance(false);
  KeyboardManager.setShouldResignOnTouchOutside(false);
  KeyboardManager.resignFirstResponder();
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Native Navigation 顯示 Modal 透明背景]]></title>
    <link href="http://whhotw.github.io/blog/2018/03/08/react-native-navigation-xian-shi-m-tou-ming-bei-jing/"/>
    <updated>2018-03-08T19:15:14+08:00</updated>
    <id>http://whhotw.github.io/blog/2018/03/08/react-native-navigation-xian-shi-m-tou-ming-bei-jing</id>
    <content type="html"><![CDATA[<p>不透明的背景</p>

<p><img src="/assets/Simulator%20Screen%20Shot%20-%20iPhone%208%20-%202018-03-08%20at%2019.17.36.png" width="360" height="640"></p>

<p>透明的背景</p>

<p><img src="/assets/Simulator%20Screen%20Shot%20-%20iPhone%208%20-%202018-03-08%20at%2019.27.42.png" width="360" height="640"></p>

<pre><code>static navigatorStyle = {
    screenBackgroundColor: 'transparent',
    modalPresentationStyle: 'overFullScreen'
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我自己的 RN 項目配置]]></title>
    <link href="http://whhotw.github.io/blog/2018/03/02/wo-zi-ji-de-rn-xiang-mu-pei-zhi/"/>
    <updated>2018-03-02T01:34:59+08:00</updated>
    <id>http://whhotw.github.io/blog/2018/03/02/wo-zi-ji-de-rn-xiang-mu-pei-zhi</id>
    <content type="html"><![CDATA[<p>記錄一下，建立一個新的 RN 項目時的步驟，每次都會忘記，再加上改版時不時就跑出一推問題，麻煩！這只是我個人有用到一些套件與建立步驟</p>

<h1>CLI</h1>

<pre><code>yarn init ${PROJECT_NAME} --version 0.51.0
yarn add redux-thunk redux-logger redux react-redux react-native-navigation react-native-vector-icons react-native-i18n react-native-elements prop-types
yarn add babel-eslint eslint eslint-config-airbnb eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react babel-core@6.0.0 --dev
</code></pre>

<h1>package.json</h1>

<pre><code>{
  "name": "${PROJECT_NAME}",
  "version": "0.0.1",
  "private": true,
  "scripts": {
    "start": "node node_modules/react-native/local-cli/cli.js start",
    "test": "jest"
  },
  "dependencies": {
    "prop-types": "^15.6.1",
    "react": "16.0.0",
    "react-native": "0.51.0",
    "react-native-elements": "^0.19.0",
    "react-native-i18n": "^2.0.12",
    "react-native-navigation": "^1.1.393",
    "react-native-vector-icons": "^4.5.0",
    "react-redux": "^5.0.7",
    "redux": "^3.7.2",
    "redux-logger": "^3.0.6",
    "redux-thunk": "^2.2.0"
  },
  "devDependencies": {
    "babel-core": "6.0.0",
    "babel-eslint": "^8.2.2",
    "babel-jest": "22.4.1",
    "babel-preset-react-native": "4.0.0",
    "eslint": "^4.18.1",
    "eslint-config-airbnb": "^16.1.0",
    "eslint-plugin-import": "^2.9.0",
    "eslint-plugin-jsx-a11y": "^6.0.3",
    "eslint-plugin-react": "^7.7.0",
    "jest": "22.4.2",
    "react-test-renderer": "16.0.0"
  },
  "jest": {
    "preset": "react-native"
  },
  "rnpm": {
    "assets": [
      "./src/fonts"
    ]
  }
}
</code></pre>

<h1>Directory tree</h1>

<pre><code>▶ tree -La 1
.
├── .babelrc
├── .buckconfig
├── .eslintrc
├── .flowconfig
├── .gitattributes
├── .gitignore
├── .watchmanconfig
├── __tests__
├── android
├── app.json
├── index.js
├── ios
├── node_modules
├── package.json
├── src
└── yarn.lock
</code></pre>

<h1>Directory of src tree</h1>

<pre><code>▶ tree -L 1
.
├── actions
├── components
├── config
├── fonts
├── helpers
├── i18n
├── reducers
└── screens
</code></pre>

<h1>.eslintrc</h1>

<pre><code>{
  "parser": "babel-eslint",
  "extends": "airbnb",
  "rules": {
    "react/jsx-filename-extension": [1, { "extensions": [".js", ".jsx"] }],
    "react/prop-types": [1],
    "no-unused-vars": [1],
    "no-use-before-define": [1, { "functions": true, "classes": true }],
  },
  "globals": {
    "fetch": true,
    "__DEV__": true,
  }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RN 中使用 SVG]]></title>
    <link href="http://whhotw.github.io/blog/2018/02/05/rn-svg/"/>
    <updated>2018-02-05T10:43:32+08:00</updated>
    <id>http://whhotw.github.io/blog/2018/02/05/rn-svg</id>
    <content type="html"><![CDATA[<h1>PNG、JPG</h1>

<p>在 <code>RN</code> 中載入圖片是非常容易的事情，可以使用</p>

<pre><code>require('./mypng.png')
require('./myjpg.jpg')
</code></pre>

<p>這類的<a href="https://facebook.github.io/react-native/docs/image.html#source">寫法</a></p>

<h1>SVG</h1>

<p>假如是想載入 <code>.svg</code> 的話，就需要第三方的套件幫忙，或是轉成字型檔載入，以下是我使用字型檔的方式</p>

<blockquote><p>什麼是SVG？最大的優點就是縮放不會失真，細節可以<a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E7%B8%AE%E6%94%BE%E5%90%91%E9%87%8F%E5%9C%96%E5%BD%A2">參考</a></p></blockquote>

<h1>React-Native-Vector-Icons</h1>

<h2>Install</h2>

<pre><code>npm install react-native-vector-icons
react-native link
</code></pre>

<h2>Generate .ttf and .json by Fontello or Icomoon</h2>

<p><a href="http://fontello.com/">Fontello</a>，<a href="https://icomoon.io/app">Icomoon</a></p>

<h2>Link</h2>

<ul>
<li>將 <code>.ttf</code> 放到專案中的 <code>fonts</code> 資料夾裡</li>
<li>在 <code>package.json</code> 中加入 <code>"rnpm": { "assets": ["fonts"] }</code></li>
<li>執行 <code>react-native link</code></li>
</ul>


<h2>Import</h2>

<pre><code>import { createIconSetFromFontello } from 'react-native-vector-icons';
import fontelloConfig from './config.json';
const Icon = createIconSetFromFontello(fontelloConfig);
</code></pre>
]]></content>
  </entry>
  
</feed>
