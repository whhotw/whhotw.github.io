<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | wlog]]></title>
  <link href="http://whhotw.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://whhotw.github.io/"/>
  <updated>2020-04-06T21:00:08+08:00</updated>
  <id>http://whhotw.github.io/</id>
  <author>
    <name><![CDATA[w]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[0.1 + 0.2 = ?]]></title>
    <link href="http://whhotw.github.io/blog/2019/09/09/0-dot-1-plus-0-dot-2-equals/"/>
    <updated>2019-09-09T23:14:37+08:00</updated>
    <id>http://whhotw.github.io/blog/2019/09/09/0-dot-1-plus-0-dot-2-equals</id>
    <content type="html"><![CDATA[<pre><code>var a = 0.1 + 0.2;
if (a === 0.3) {
    // never into, why?
}
</code></pre>

<p>這段程式碼有很高的機率會是 <code>false</code> 甚至可以說一定會是 <code>false</code>，為什麼呢？市面上常見的程式語言，理論上都會遇到這個陷阱，尤其是像 <code>js</code> 這類的動態語言。當然！這也不是什麼困難問題，隨便 google 一下就知道怎麼解了，這邊我就簡單記錄一下，順帶一提，根本原因是系統對於浮點數的儲存原理，有興趣請自行上網搜尋。</p>

<h2>解法</h2>

<h3><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON">Number.EPSILON</a></h3>

<p>利用相減後的差額是否小於 <code>Number.EPSILON</code> 來判定是否成立</p>

<pre><code>if (Math.abs(a - 0.3) &lt; Number.EPSILON) {
    // if true, a = 0.3
}
</code></pre>

<h3><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision">Number.prototype.toPrecision()</a></h3>

<p><a href="https://github.com/camsong/blog/issues/9">參考這篇</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Abort Fetch API]]></title>
    <link href="http://whhotw.github.io/blog/2018/08/01/abort-fetch-api/"/>
    <updated>2018-08-01T21:46:22+08:00</updated>
    <id>http://whhotw.github.io/blog/2018/08/01/abort-fetch-api</id>
    <content type="html"><![CDATA[<p>在 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch API</a> 中並沒有原生提供中斷請求的方法。但假設遇到並行事件時，需要取消前一個請求可以怎麼做呢？這時候就可以實作 <code>Promise</code> 的物件來解決</p>

<pre><code>const promise = new Promise(function (resolve, reject) {
  const f = fetch(url, options).then((res) =&gt; {
    if (!res.ok) {
      reject(new Error('something wrong'));
    } else {
      // resolve(res.json());
      resolve('it's work');
    }
  });

  f.abort = function () {
    reject(new Error('abort error'));
  };

  return f;
});

promise.then((res) =&gt; {
    console.log(res); // it's work
}).catch(e =&gt; {
    console.error(e); // something wrong or abort error
});

// call this before resolve
promise.abort();
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Number() vs parseInt()]]></title>
    <link href="http://whhotw.github.io/blog/2018/05/09/number-vs-parseint/"/>
    <updated>2018-05-09T17:58:06+08:00</updated>
    <id>http://whhotw.github.io/blog/2018/05/09/number-vs-parseint</id>
    <content type="html"><![CDATA[<pre><code>parseInt('123', 10) // 123
parseInt('123abc', 10) // 123
parseInt(undefined, 10) // NaN
parseInt(null, 10) // NaN
parseInt('', 10) // NaN
Number('123') // 123
Number('123abc', 10) // NaN
Number(undefined) // NaN
Number(null) // 0
Number('') // 0
</code></pre>

<p>數字轉字串</p>

<pre><code>String(123) // "123"
`123` // "123"

let a = 123;
a.toString() // "123"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fetch API Content-Type]]></title>
    <link href="http://whhotw.github.io/blog/2018/03/20/fetch-api-content-type/"/>
    <updated>2018-03-20T09:38:46+08:00</updated>
    <id>http://whhotw.github.io/blog/2018/03/20/fetch-api-content-type</id>
    <content type="html"><![CDATA[<p>最近用到 js 中的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">fetch</a> 發現 <code>Content-Type</code> 會因為參數而改變</p>

<p>例如</p>

<pre><code>const options = {
  method,
  headers: {
    Accept: 'application/json',
    'Content-Type': 'application/json', // 指定
  },
  body: params, // 第二張圖
  // body: JSON.stringify(params), // 第一張圖
};

return fetch(url, options)
  .then((res) =&gt; {
    if (!res.ok) {
      throw new Error('請檢查網路連線');
    }

    return res.json();
  });
</code></pre>

<p>假如 <code>params</code> 沒有用 <code>JSON.stringify</code> 的話，實際傳出去的 <code>Content-Type</code> 不一定是 <code>application/json</code></p>

<p>我用 wireshark 做的實驗</p>

<p><img src="/assets/Screen%20Shot%202018-03-20%20at%2009.44.19.png" width="1080" height="1920"></p>

<p><img src="/assets/Screen%20Shot%202018-03-20%20at%2009.44.05.png" width="1080" height="1920"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript 20 Kinds of Methods]]></title>
    <link href="http://whhotw.github.io/blog/2018/01/15/javascript-20-kinds-of-methods/"/>
    <updated>2018-01-15T11:20:21+08:00</updated>
    <id>http://whhotw.github.io/blog/2018/01/15/javascript-20-kinds-of-methods</id>
    <content type="html"><![CDATA[<p>js 中 20 種必須知道的陣列方法</p>

<p><img src="https://raw.githubusercontent.com/tooto1985/js-array-operations/master/main.jpg" alt="image" /></p>
]]></content>
  </entry>
  
</feed>
