<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Js | wlog]]></title>
  <link href="http://whhotw.github.io/blog/categories/js/atom.xml" rel="self"/>
  <link href="http://whhotw.github.io/"/>
  <updated>2017-12-14T04:18:41+08:00</updated>
  <id>http://whhotw.github.io/</id>
  <author>
    <name><![CDATA[w]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Js 動態載入模組]]></title>
    <link href="http://whhotw.github.io/blog/2017/11/20/mo-zu/"/>
    <updated>2017-11-20T15:53:41+08:00</updated>
    <id>http://whhotw.github.io/blog/2017/11/20/mo-zu</id>
    <content type="html"><![CDATA[<p>兩個關鍵字 <code>import</code> <code>export</code>，用於載入與輸出模組。但實際上不一定會使用到模組的程式碼，這時候就需要動態載入，在確定需要使用的時候載入</p>

<pre><code>export let go = () =&gt; {
    return 'AAA';
};

async () =&gt; {
    let Module = await import('./Module.js');
    console.log(Module.go());
}
</code></pre>

<p>輸出</p>

<pre><code>AAA
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Promise]]></title>
    <link href="http://whhotw.github.io/blog/2017/09/08/promise/"/>
    <updated>2017-09-08T14:14:37+08:00</updated>
    <id>http://whhotw.github.io/blog/2017/09/08/promise</id>
    <content type="html"><![CDATA[<p>最早是在社群提出，但 <code>ES6</code> 推出後就被列入標準了，原生提供 <code>Promise</code> 對象，讓前端工程師處理非同步問題。例如：下載網路上的圖片之後顯示。</p>

<h3>基本用法</h3>

<pre><code>let promise = new Promise(function(resolve, reject) {
  // ... some code

  if (true){
    resolve(value);
  } else {
    reject(error);
  }
});
</code></pre>

<h3>Promise.resolve()</h3>

<pre><code>let p = Promise.resolve(arg);
</code></pre>

<ul>
<li>傳入的參數是 <code>thenable</code> 將會執行該對象的 <code>then</code> 然後回傳一個 <code>Promise</code> 狀態為 <code>resolved</code> 的對象</li>
<li>傳入的參數不具有 <code>thenable</code> 將會回傳一個 <code>Promise</code> 狀態為 <code>resolved</code> 的對象</li>
</ul>


<pre><code>let p = Promise.resolve('Hello');

p.then(function (s){
  console.log(s)
});
// Hello
</code></pre>

<ul>
<li>沒有傳入參數將會回傳一個 <code>Promise</code> 狀態為 <code>resolved</code> 的對象</li>
</ul>


<h3>Promise.reject()</h3>

<pre><code>let p = Promise.reject(arg);
</code></pre>

<ul>
<li>大致原理跟 <code>Promise.resolve()</code> 一樣，只是狀態為 <code>rejected</code></li>
</ul>

]]></content>
  </entry>
  
</feed>
