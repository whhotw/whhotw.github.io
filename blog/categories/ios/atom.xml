<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | wlog]]></title>
  <link href="http://whhotw.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://whhotw.github.io/"/>
  <updated>2018-04-16T11:59:49+08:00</updated>
  <id>http://whhotw.github.io/</id>
  <author>
    <name><![CDATA[w]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing iOS Notification With APNs]]></title>
    <link href="http://whhotw.github.io/blog/2018/01/17/testing-ios-notification-with-apns/"/>
    <updated>2018-01-17T16:24:21+08:00</updated>
    <id>http://whhotw.github.io/blog/2018/01/17/testing-ios-notification-with-apns</id>
    <content type="html"><![CDATA[<p>設定步驟可以<a href="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/HandlingRemoteNotifications.html">參考蘋果的官方</a>或是<a href="https://medium.com/@ankushaggarwal/generate-apns-certificate-for-ios-push-notifications-85e4a917d522">這篇</a></p>

<p>此篇主要是介紹我自己用的測試工具，Github 上可以抓到<a href="https://github.com/pubnub/pubnub-support/blob/master/kb/code/push_debug.py">原檔</a></p>

<pre><code>// for production
python push_debug.py aps.pem ${device_token}

// for sandbox
python push_debug.py aps.pem ${device_token} -s
</code></pre>

<h3>產出PEM檔</h3>

<p>從 keychain 導出 p12 檔後需要轉成 pem</p>

<p><img src="https://files.readme.io/bMyAXe1tRjac9USLX1z0_34.jpg" alt="" /></p>

<pre><code>openssl pkcs12 -in aps.p12 -out aps.pem -nodes -clcerts
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS App 打包用的指令]]></title>
    <link href="http://whhotw.github.io/blog/2017/11/23/ios-app-da-bao-zhi-ling/"/>
    <updated>2017-11-23T15:30:49+08:00</updated>
    <id>http://whhotw.github.io/blog/2017/11/23/ios-app-da-bao-zhi-ling</id>
    <content type="html"><![CDATA[<p>自動打包這件事情，在很多時候可以幫助開發者，節省很多的等待時間。簡單來說就是開始執行你就可以不用管了，之後的產出甚至可以結合自動測試，發布等等。這邊單純分享打包用的指令</p>

<h3>Archive</h3>

<pre><code>$ xcodebuild -workspace ${PROJECT_NAME}.xcworkspace -scheme ${TARGET_NAME} -sdk iphoneos -configuration archive -archivePath $PWD/build/${TARGET_NAME}.xcarchive
</code></pre>

<h3>Export *.ipa</h3>

<pre><code>$ xcodebuild -exportArchive -archivePath $PWD/build/${TARGET_NAME}.xcarchive -exportOptionsPlist BUILD.plist -exportPath $PWD/build
</code></pre>

<h3>BUILD.plist</h3>

<pre><code>$ cat BUILD.plist
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;dict&gt;
        &lt;key&gt;teamID&lt;/key&gt;
        &lt;string&gt;${TEAM_ID}&lt;/string&gt;
        &lt;key&gt;method&lt;/key&gt;
        &lt;string&gt;${METHOD}&lt;/string&gt;
        &lt;key&gt;uploadSymbols&lt;/key&gt;
        &lt;true/&gt;
        &lt;key&gt;compileBitcode&lt;/key&gt;
        &lt;true/&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</code></pre>

<blockquote><p>Xcode8.3 以上透過 command-line 輸出 ipa 需要打入 <code>exportOptionsPlist</code> 這個鍵值，因此需要多配置一個檔案類似如上</p></blockquote>

<ul>
<li>method: (String) The method of distribution, which can be set as any of the following:

<ul>
<li>app-store</li>
<li>enterprise</li>
<li>ad-hoc</li>
<li>development</li>
</ul>
</li>
<li>teamID: (String) The development program team identifier.</li>
<li>uploadSymbols: (Boolean) Option to include symbols in the generated ipa file.</li>
<li>uploadBitcode: (Boolean) Option to include Bitcode.</li>
</ul>


<h3>我自己寫的 Shell Script</h3>

<script src="https://gist.github.com/whhotw/b1d12e06844cbf08ae7dfa088e306fad.js"></script>

]]></content>
  </entry>
  
</feed>
