<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[wlog]]></title>
  <link href="http://whhotw.github.io/atom.xml" rel="self"/>
  <link href="http://whhotw.github.io/"/>
  <updated>2018-01-29T18:51:47+08:00</updated>
  <id>http://whhotw.github.io/</id>
  <author>
    <name><![CDATA[w]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LeetCode #581. Shortest Unsorted Continuous Subarray]]></title>
    <link href="http://whhotw.github.io/blog/2018/01/29/leetcode-number-581-shortest-unsorted-continuous-subarray/"/>
    <updated>2018-01-29T18:45:26+08:00</updated>
    <id>http://whhotw.github.io/blog/2018/01/29/leetcode-number-581-shortest-unsorted-continuous-subarray</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var findUnsortedSubarray = function(nums) {
</span><span class='line'>    let n = nums.map((val) =&gt; val);
</span><span class='line'>    
</span><span class='line'>    nums.sort((a, b) =&gt; {
</span><span class='line'>        return a - b;
</span><span class='line'>    });
</span><span class='line'>    
</span><span class='line'>    let l = 0;
</span><span class='line'>    let r = n.length;
</span><span class='line'>    
</span><span class='line'>    while (l &lt;= r) {
</span><span class='line'>        if (n[l] === nums[l]) {
</span><span class='line'>            l++;
</span><span class='line'>        } else if (n[r] === nums[r]) {
</span><span class='line'>            r--;
</span><span class='line'>        } else {
</span><span class='line'>            break;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    return l &gt; r ? 0 : r - l + 1;
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[死結(Deadlock)]]></title>
    <link href="http://whhotw.github.io/blog/2018/01/29/si-jie/"/>
    <updated>2018-01-29T10:33:18+08:00</updated>
    <id>http://whhotw.github.io/blog/2018/01/29/si-jie</id>
    <content type="html"><![CDATA[<p>死結(Deadlock)，只要以下四個條件都滿足就有死結</p>

<pre><code>* 這個資源不能同時給兩個人用
* 有一個人拿了一個資源，又想拿別人的資源
* 如果一個人占了茅坑不拉屎，占用資源很久，仍不能趕他走
* A等B，B等C，C等D，D又等A 等成一圈
</code></pre>

<p>要解決這種狀況有Avoid(預防)或避免(Prevent)兩種方式，破除以上四種其中一種即可</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode #493. Reverse Pairs]]></title>
    <link href="http://whhotw.github.io/blog/2018/01/28/leetcode-number-493-reverse-pairs/"/>
    <updated>2018-01-28T10:48:40+08:00</updated>
    <id>http://whhotw.github.io/blog/2018/01/28/leetcode-number-493-reverse-pairs</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for (let i = 0; i &lt; nums.length; i++) {
</span><span class='line'>    for (let j = 0; j &lt; nums.length; j++) {
</span><span class='line'>        if (i &lt; j && nums[i] &gt; 2 * nums[j]) {
</span><span class='line'>            x++;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Big O(n<sup>2</sup>)</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Js 相關套件]]></title>
    <link href="http://whhotw.github.io/blog/2018/01/25/sublime-chang-yong-tao-jian/"/>
    <updated>2018-01-25T12:49:38+08:00</updated>
    <id>http://whhotw.github.io/blog/2018/01/25/sublime-chang-yong-tao-jian</id>
    <content type="html"><![CDATA[<h2><a href="https://github.com/jdc0589/JsFormat">JsFormat</a> 格式化程式碼</h2>

<p>手動修改 <code>e4x</code> 屬性支持 <code>jsx</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "e4x": true,
</span><span class='line'>  // jsformat options
</span><span class='line'>  "format_on_save": true,
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2><a href="https://github.com/SublimeLinter/SublimeLinter-jsxhint">SublimeLinter-jsxhint</a></h2>

<p>檢查 jsx 語法錯誤</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React-Native 開發環境]]></title>
    <link href="http://whhotw.github.io/blog/2018/01/25/react-native-kai-fa-huan-jing/"/>
    <updated>2018-01-25T10:58:08+08:00</updated>
    <id>http://whhotw.github.io/blog/2018/01/25/react-native-kai-fa-huan-jing</id>
    <content type="html"><![CDATA[<p><a href="https://facebook.github.io/react-native/docs/getting-started.html">React-Native Getting Started</a></p>

<h3>Homebrew</h3>

<p><a href="https://brew.sh">安裝</a> OSX 的套件管理包</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>▶ brew -v
</span><span class='line'>Homebrew 1.4.3
</span><span class='line'>Homebrew/homebrew-core (git revision a76c8; last commit 2018-01-11)</span></code></pre></td></tr></table></div></figure>


<h3>Node</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install node
</span><span class='line'>▶ node -v
</span><span class='line'>v8.9.4</span></code></pre></td></tr></table></div></figure>


<h3>Watchman</h3>

<p>追蹤檔案的變化</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew inatall watchman
</span><span class='line'>▶ watchman -v
</span><span class='line'>4.9.0</span></code></pre></td></tr></table></div></figure>


<h3>Command-Line</h3>

<p>指令工具用於創建專案，初始化，更新，打包服務等任務</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install react-native-cli
</span><span class='line'>▶ react-native -v
</span><span class='line'>react-native-cli: 2.0.1</span></code></pre></td></tr></table></div></figure>


<h3>Flow、Yarn</h3>

<p>檢查 <code>JavaScript</code> 語法錯誤與更高效能的第三方套件管理工具，可取代 <code>npm</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install flow
</span><span class='line'>npm install -g yarn 
</span><span class='line'>▶ yarn -v
</span><span class='line'>1.3.2</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing iOS Notification With APNs]]></title>
    <link href="http://whhotw.github.io/blog/2018/01/17/testing-ios-notification-with-apns/"/>
    <updated>2018-01-17T16:24:21+08:00</updated>
    <id>http://whhotw.github.io/blog/2018/01/17/testing-ios-notification-with-apns</id>
    <content type="html"><![CDATA[<p>設定步驟可以<a href="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/HandlingRemoteNotifications.html">參考蘋果的官方</a>或是<a href="https://medium.com/@ankushaggarwal/generate-apns-certificate-for-ios-push-notifications-85e4a917d522">這篇</a></p>

<p>此篇主要是介紹我自己用的測試工具，Github 上可以抓到<a href="https://github.com/pubnub/pubnub-support/blob/master/kb/code/push_debug.py">原檔</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// for production
</span><span class='line'>python push_debug.py aps.pem ${device_token}
</span><span class='line'>
</span><span class='line'>// for sandbox
</span><span class='line'>python push_debug.py aps.pem ${device_token} -s</span></code></pre></td></tr></table></div></figure>


<h3>產出PEM檔</h3>

<p>從 keychain 導出 p12 檔後需要轉成 pem</p>

<p><img src="https://files.readme.io/bMyAXe1tRjac9USLX1z0_34.jpg" alt="" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl pkcs12 -in aps.p12 -out aps.pem -nodes -clcerts</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript 20 Kinds of Methods]]></title>
    <link href="http://whhotw.github.io/blog/2018/01/15/javascript-20-kinds-of-methods/"/>
    <updated>2018-01-15T11:20:21+08:00</updated>
    <id>http://whhotw.github.io/blog/2018/01/15/javascript-20-kinds-of-methods</id>
    <content type="html"><![CDATA[<p>js 中 20 種必須知道的陣列方法</p>

<p><img src="https://raw.githubusercontent.com/tooto1985/js-array-operations/master/main.jpg" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stack vs. Heap]]></title>
    <link href="http://whhotw.github.io/blog/2018/01/12/stack-vs-heap/"/>
    <updated>2018-01-12T10:58:29+08:00</updated>
    <id>http://whhotw.github.io/blog/2018/01/12/stack-vs-heap</id>
    <content type="html"><![CDATA[<p>最近複習了一下<code>stack</code>跟<code>heap</code>的觀念。我主要是參考這部<a href="https://www.youtube.com/watch?v=_8-ht2AKyH4">影片</a></p>

<p><img src="https://i.ytimg.com/vi/_8-ht2AKyH4/maxresdefault.jpg" alt="image" /></p>

<blockquote><p>影片中我覺得很重要的一張圖</p></blockquote>

<h3>Global</h3>

<p>全域變數或是靜態變數</p>

<h3>Stack</h3>

<p>可預期生命週期的變數或是函式，例如：區域變數，函式變數</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int f() {
</span><span class='line'>  int a;
</span><span class='line'>  a = ff();
</span><span class='line'>  return a;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int ff() {
</span><span class='line'>  return 10;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>編譯器會知道變數的生命週期，像是上面的片段。程式會在<code>stack</code>放入變數<code>a</code>接著等待函式<code>ff</code>的返回，當<code>ff</code>返回時會從<code>stack</code>中釋放變數<code>a</code>，因此程式可以自我管理記憶體空間不需要開發者介入</p>

<h3>Heap</h3>

<p>動態配置的空間，例如：指標</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int f() {
</span><span class='line'>  int *a;
</span><span class='line'>  a = (int*)malloc(sizeof(int)); // 配置記憶體
</span><span class='line'>  *a = 10;
</span><span class='line'>  free(a); //釋放記憶體
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>編譯器並不會知道何時要釋放變數<code>a</code>，因此開發者必須自行執行函式<code>free</code>將記憶體釋放。配置跟釋放有<code>malloc</code> <code>free</code>跟<code>new</code> <code>delete</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[淺拷貝 vs. 深拷貝]]></title>
    <link href="http://whhotw.github.io/blog/2018/01/11/"/>
    <updated>2018-01-11T22:21:31+08:00</updated>
    <id>http://whhotw.github.io/blog/2018/01/</id>
    <content type="html"><![CDATA[<h3>複製物件你可能會這麼寫</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let a = {a: '1', b: '2', c: '3'};
</span><span class='line'>let x = a;
</span><span class='line'>x.a = 10
</span><span class='line'>console.log(a); // {a: '10', b: '2', c: '3'}
</span><span class='line'>console.log(x === a); // true</span></code></pre></td></tr></table></div></figure>


<p>為什麼新的變數內容改變，舊的變數內容也會變呢？因為以上的寫法為<code>淺拷貝</code>但是很多時候我們並不想這樣，這時候就需要改成<code>深拷貝</code>的寫法</p>

<h3>淺拷貝 => 分身術</h3>

<p>外表（值）長得一樣，靈魂（記憶體位置）<strong>相同</strong></p>

<h3>深拷貝 => 雙胞胎</h3>

<p>外表（值）長得一樣，靈魂（記憶體位置）<strong>不同</strong></p>

<h3>比較圖</h3>

<p><img src="http://i.stack.imgur.com/hOPkR.png" alt="image" /></p>

<h3>Object.assign</h3>

<p>ES6 上可以用的函式但只能處理深度只有一層的物件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let a = {a: '1', b: '2', c: '3'};
</span><span class='line'>let x = Object.assign({}, a);
</span><span class='line'>x.a = 10
</span><span class='line'>console.log(a); // {a: '1', b: '2', c: '3'}
</span><span class='line'>console.log(x === a); // false</span></code></pre></td></tr></table></div></figure>


<h3>lodash</h3>

<p>網路上熱門的<a href="https://lodash.com/">函式庫</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let _ = require('lodash');
</span><span class='line'>let a = {a: '1', b: '2', c: '3'};
</span><span class='line'>let x = _.cloneDeep(a);
</span><span class='line'>x.a = 10
</span><span class='line'>console.log(a); // {a: '1', b: '2', c: '3'}
</span><span class='line'>console.log(x === a); // false</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript 中 This 的種種]]></title>
    <link href="http://whhotw.github.io/blog/2018/01/09/javascript-zhong-de-this/"/>
    <updated>2018-01-09T09:56:40+08:00</updated>
    <id>http://whhotw.github.io/blog/2018/01/09/javascript-zhong-de-this</id>
    <content type="html"><![CDATA[<p>JavaScript 中的 this 是一個很容易搞混的東東。</p>

<p>具名函數搭配 bind 的寫法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function wth() {
</span><span class='line'>  console.log(this);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>let o = {
</span><span class='line'>  name: 1
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>wth(); // window
</span><span class='line'>
</span><span class='line'>let wthBind = wth.bind(o);
</span><span class='line'>
</span><span class='line'>wthBind(); // object o</span></code></pre></td></tr></table></div></figure>


<p>使用箭頭函數</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let wth = () =&gt; {
</span><span class='line'>  console.log(this);
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>let o = {
</span><span class='line'>  name: 1
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>wth(); // window
</span><span class='line'>
</span><span class='line'>let wthBind = wth.bind(o);
</span><span class='line'>
</span><span class='line'>wthBind(); // window</span></code></pre></td></tr></table></div></figure>


<p>為什麼執行結果不同呢？是因為透過箭頭函數 this 對象會在宣告時就綁定，因此就算之後用 bind 也不會有變化</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Commit 空資料夾到 Git]]></title>
    <link href="http://whhotw.github.io/blog/2018/01/05/git-kong-zi-liao-jia/"/>
    <updated>2018-01-05T01:29:37+08:00</updated>
    <id>http://whhotw.github.io/blog/2018/01/05/git-kong-zi-liao-jia</id>
    <content type="html"><![CDATA[<p>有些時候想要在 git 上 commit 一個空資料夾時，可以透過 .gitignore 的設定來做到。</p>

<h3>專案結構</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tree -La 1
</span><span class='line'>.
</span><span class='line'>├── .git
</span><span class='line'>├── .gitignore
</span><span class='line'>├── README.md
</span><span class='line'>├── application
</span><span class='line'>├── assets
</span><span class='line'>├── index.php
</span><span class='line'>├── system
</span><span class='line'>└── vendor</span></code></pre></td></tr></table></div></figure>


<blockquote><p>假如你有一個空的資料夾，你是沒有辦法 commit 這個檔案到 git 上的，因此可以建立一個 .gitignore 在這個空的資料夾裡</p></blockquote>

<h3>新的專案結構</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tree -La 1
</span><span class='line'>.
</span><span class='line'>├── .git
</span><span class='line'>├── .gitignore
</span><span class='line'>├── README.md
</span><span class='line'>├── application
</span><span class='line'>├── assets
</span><span class='line'>├── index.php
</span><span class='line'>├── system
</span><span class='line'>├── test
</span><span class='line'>│   └── .gitignore
</span><span class='line'>└── vendor</span></code></pre></td></tr></table></div></figure>


<blockquote><p>如此一來將可以 commit</p></blockquote>

<p>另外你假如想要保留一個 temp 資料夾在 git 上，你可以順便利用這個 .gitignore</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim test/.gitignore
</span><span class='line'>*
</span><span class='line'>!.gitignore</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 OSX 環境建置 Nginx+PHP]]></title>
    <link href="http://whhotw.github.io/blog/2017/12/18/"/>
    <updated>2017-12-18T16:14:50+08:00</updated>
    <id>http://whhotw.github.io/blog/2017/12/</id>
    <content type="html"><![CDATA[<p>參考
<a href="https://gist.github.com/dtomasi/ab76d14338db82ec24a1fc137caff75b">https://gist.github.com/dtomasi/ab76d14338db82ec24a1fc137caff75b</a></p>

<h2>Install Commandline Tools</h2>

<p><code>$ xcode-select --install</code></p>

<h2>Install Nginx</h2>

<p><code>$ brew update</code></p>

<h3>After install run</h3>

<p><code>sudo nginx</code></p>

<h3>Configuration</h3>

<p><code>/usr/local/etc/nginx/nginx.conf</code></p>

<h3>Stop nginx service</h3>

<p><code>sudo nginx -s stop</code></p>

<h3>Reload nginx service</h3>

<p><code>sudo nginx -s reload</code></p>

<h3>Nginx.conf</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /usr/local/etc/nginx/nginx.conf
</span><span class='line'>
</span><span class='line'>    server {
</span><span class='line'>        listen       8080;
</span><span class='line'>        server_name  localhost;
</span><span class='line'>
</span><span class='line'>        root   html;
</span><span class='line'>
</span><span class='line'>        location / {
</span><span class='line'>            try_files index.html /index.php;
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        location ~ \.php$ {
</span><span class='line'>            fastcgi_pass  127.0.0.1:9000;
</span><span class='line'>            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
</span><span class='line'>            include       fastcgi_params;
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        location ~ /\.ht {
</span><span class='line'>            deny  all;
</span><span class='line'>        }
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<h3>Install PHP56</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew tap homebrew/homebrew-php
</span><span class='line'>$ brew install --without-apache --without-fpm --without-mysql php56</span></code></pre></td></tr></table></div></figure>


<h3>php-fpm</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ php-fpm
</span><span class='line'>[18-Dec-2017 16:51:20] NOTICE: [pool www] 'user' directive is ignored when FPM is not running as root
</span><span class='line'>[18-Dec-2017 16:51:20] NOTICE: [pool www] 'group' directive is ignored when FPM is not running as root
</span><span class='line'>
</span><span class='line'>$sudo php-fpm</span></code></pre></td></tr></table></div></figure>


<blockquote><p>注意權限</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 OSX 環境下安裝 PHP Mcrypt 套件]]></title>
    <link href="http://whhotw.github.io/blog/2017/12/14/php-an-zhuang-mcrypt/"/>
    <updated>2017-12-14T11:09:46+08:00</updated>
    <id>http://whhotw.github.io/blog/2017/12/14/php-an-zhuang-mcrypt</id>
    <content type="html"><![CDATA[<p>指令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install mcrypt
</span><span class='line'>$ brew tap homebrew/homebrew-php
</span><span class='line'>$ brew install php56-mcrypt --without-homebrew-php</span></code></pre></td></tr></table></div></figure>


<blockquote><p>php.ini 加入 extension, 重啟 apache</p></blockquote>

<p>網路上找到的解決辦法</p>

<script src="https://gist.github.com/idleberg/24479f34dc5007e50d47.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.htaccess 設定]]></title>
    <link href="http://whhotw.github.io/blog/2017/12/14/php-htaccess-she-ding/"/>
    <updated>2017-12-14T03:44:11+08:00</updated>
    <id>http://whhotw.github.io/blog/2017/12/14/php-htaccess-she-ding</id>
    <content type="html"><![CDATA[<p>其實用 <code>PHP</code> 寫的東西不是很多，再加上一直都不算是網頁端的開發者，所以很多相關的知識其實不太熟悉，哈；目前台灣傳統的資訊公司（新創應該都是 <code>Node.js</code> 了），應該還是用 <code>PHP</code> 來開發網路應用，一來當然是廣大社群的力量（有問題 google 一下，基本上都能找到解法），很多很棒的第三方套件，再加上建置成本相對便宜的因素。最近民間友人拜託看一個 bug ，就當作工作之餘也摸一些網頁的東西，並且趁這次記錄一下。註：我是 OSX 的環境</p>

<h2>遇到 http 500 internal server error</h2>

<p>確定 apache 的模組有載入</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim /etc/apache2/httpd.conf
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>LoadModule rewrite_module libexec/apache2/mod_rewrite.so
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<h2>開啟 .htaccess 功能</h2>

<p>類似這樣</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Directory "/myweb"&gt;
</span><span class='line'>  ...
</span><span class='line'>  AllowOverride all
</span><span class='line'>  ...
</span><span class='line'>&lt;/Directory&gt;</span></code></pre></td></tr></table></div></figure>


<h2>.htaccess 檔案內容</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;IfModule mod_rewrite.c&gt;
</span><span class='line'>    RewriteEngine on
</span><span class='line'>    RewriteBase /
</span><span class='line'>    #RewriteCond $1 !^(index\.php|assets|.*\.ipa|images|swf|uploads|js|css|assets|robots\.txt|$)
</span><span class='line'>    RewriteCond %{REQUEST_FILENAME} !-f
</span><span class='line'>    RewriteCond %{REQUEST_FILENAME} !-d
</span><span class='line'>    RewriteRule ^(.*)$ index.php?/$1 [L,QSA]
</span><span class='line'>&lt;/IfModule&gt;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React-Native Init App]]></title>
    <link href="http://whhotw.github.io/blog/2017/12/13/react-native-app-package/"/>
    <updated>2017-12-13T15:43:29+08:00</updated>
    <id>http://whhotw.github.io/blog/2017/12/13/react-native-app-package</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ react-naitve init MyApp
</span><span class='line'>
</span><span class='line'>// 指定版本
</span><span class='line'>$ react-naitve init MyApp --version 0.49.0</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode #2. Add Two Numbers]]></title>
    <link href="http://whhotw.github.io/blog/2017/11/28/leetcode-number-2-add-two-numbers/"/>
    <updated>2017-11-28T17:31:11+08:00</updated>
    <id>http://whhotw.github.io/blog/2017/11/28/leetcode-number-2-add-two-numbers</id>
    <content type="html"><![CDATA[<p><em>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</em></p>

<p><em>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</em></p>

<p><em>Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8</em></p>

<blockquote><p>相加兩個 linked lists</p></blockquote>

<p>兩個 list 不一定會是等長，因此當沒有下一個節點的時候會新增一個假的節點，在下一回合檢查的時候 <code>if (!l1.next &amp;&amp; !l2.next)</code> 為真即最後回合。</p>

<p>PS. 處理進位問題不是很漂亮應該有更好的寫法！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var addTwoNumbers = function(l1, l2) {
</span><span class='line'>    if (l1 && l2) { 
</span><span class='line'>        let val = l1.val + l2.val;
</span><span class='line'>        let l = new ListNode(val % 10);
</span><span class='line'>        
</span><span class='line'>        if (!l1.next && !l2.next) {
</span><span class='line'>            l.next = (val &gt; 9 ? new ListNode(1) : null);
</span><span class='line'>            return l;
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        if (!l1.next) {
</span><span class='line'>            l1.next = new ListNode(0);
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        if (!l2.next) {
</span><span class='line'>            l2.next = new ListNode(0);
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        if (val &gt; 9) {
</span><span class='line'>            if (l1.next) {
</span><span class='line'>                l1.next.val++;    
</span><span class='line'>            } else {
</span><span class='line'>                l1.next = new ListNode(1);
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        l.next = addTwoNumbers(l1.next, l2.next);    
</span><span class='line'>        return l;
</span><span class='line'>    } else {
</span><span class='line'>        return null;
</span><span class='line'>    }
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode #102. Binary Tree Level Order Traversal]]></title>
    <link href="http://whhotw.github.io/blog/2017/11/27/leetcode-number-102-binary-tree-level-order-traversal/"/>
    <updated>2017-11-27T13:30:41+08:00</updated>
    <id>http://whhotw.github.io/blog/2017/11/27/leetcode-number-102-binary-tree-level-order-traversal</id>
    <content type="html"><![CDATA[<p>分層印出二元樹的元素，自己寫了遞迴的方式，紀錄一下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let toArray = (root, arr, level, idx) =&gt; {
</span><span class='line'>    if (!root) {
</span><span class='line'>        return null;
</span><span class='line'>    } else {
</span><span class='line'>        if (!arr[level]) {
</span><span class='line'>            arr[level] = [];
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        arr[level].push(root.val);
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    toArray(root.left, arr, level + 1, idx * 2);
</span><span class='line'>    toArray(root.right, arr, level + 1, idx * 2 + 1);
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS App 打包用的指令]]></title>
    <link href="http://whhotw.github.io/blog/2017/11/23/ios-app-da-bao-zhi-ling/"/>
    <updated>2017-11-23T15:30:49+08:00</updated>
    <id>http://whhotw.github.io/blog/2017/11/23/ios-app-da-bao-zhi-ling</id>
    <content type="html"><![CDATA[<p>自動打包這件事情，在很多時候可以幫助開發者，節省很多的等待時間。簡單來說就是開始執行你就可以不用管了，之後的產出甚至可以結合自動測試，發布等等。這邊單純分享打包用的指令</p>

<h3>Archive</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ xcodebuild -workspace ${PROJECT_NAME}.xcworkspace -scheme ${TARGET_NAME} -sdk iphoneos -configuration archive -archivePath $PWD/build/${TARGET_NAME}.xcarchive</span></code></pre></td></tr></table></div></figure>


<h3>Export *.ipa</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ xcodebuild -exportArchive -archivePath $PWD/build/${TARGET_NAME}.xcarchive -exportOptionsPlist BUILD.plist -exportPath $PWD/build</span></code></pre></td></tr></table></div></figure>


<h3>BUILD.plist</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat BUILD.plist
</span><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
</span><span class='line'>&lt;plist version="1.0"&gt;
</span><span class='line'>&lt;dict&gt;
</span><span class='line'>        &lt;key&gt;teamID&lt;/key&gt;
</span><span class='line'>        &lt;string&gt;${TEAM_ID}&lt;/string&gt;
</span><span class='line'>        &lt;key&gt;method&lt;/key&gt;
</span><span class='line'>        &lt;string&gt;${METHOD}&lt;/string&gt;
</span><span class='line'>        &lt;key&gt;uploadSymbols&lt;/key&gt;
</span><span class='line'>        &lt;true/&gt;
</span><span class='line'>        &lt;key&gt;compileBitcode&lt;/key&gt;
</span><span class='line'>        &lt;true/&gt;
</span><span class='line'>&lt;/dict&gt;
</span><span class='line'>&lt;/plist&gt;</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Xcode8.3 以上透過 command-line 輸出 ipa 需要打入 <code>exportOptionsPlist</code> 這個鍵值，因此需要多配置一個檔案類似如上</p></blockquote>

<ul>
<li>method: (String) The method of distribution, which can be set as any of the following:

<ul>
<li>app-store</li>
<li>enterprise</li>
<li>ad-hoc</li>
<li>development</li>
</ul>
</li>
<li>teamID: (String) The development program team identifier.</li>
<li>uploadSymbols: (Boolean) Option to include symbols in the generated ipa file.</li>
<li>uploadBitcode: (Boolean) Option to include Bitcode.</li>
</ul>


<h3>我自己寫的 Shell Script</h3>

<script src="https://gist.github.com/whhotw/b1d12e06844cbf08ae7dfa088e306fad.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git 設定忽略自簽憑證]]></title>
    <link href="http://whhotw.github.io/blog/2017/11/21/git-she-ding-hu-lue-zi-qian-ping-zheng/"/>
    <updated>2017-11-21T17:07:54+08:00</updated>
    <id>http://whhotw.github.io/blog/2017/11/21/git-she-ding-hu-lue-zi-qian-ping-zheng</id>
    <content type="html"><![CDATA[<p>公司的 git server 為了安全性有掛上自簽憑證，但是 git <code>http.sslVerify</code> 預設 <code>true</code> 因此會無法上傳 code，這時候可以手動修改 <code>http.sslVerify</code> 這個值</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global http.sslVerify false</span></code></pre></td></tr></table></div></figure>


<p>想要安全一些的話就設定自簽憑證路徑</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --system http.sslCAPath /path/to/cacerts</span></code></pre></td></tr></table></div></figure>


<p>以上兩種都可行</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript 動態載入模組]]></title>
    <link href="http://whhotw.github.io/blog/2017/11/20/mo-zu/"/>
    <updated>2017-11-20T15:53:41+08:00</updated>
    <id>http://whhotw.github.io/blog/2017/11/20/mo-zu</id>
    <content type="html"><![CDATA[<p>兩個關鍵字 <code>import</code> <code>export</code>，用於載入與輸出模組。但實際上不一定會使用到模組的程式碼，這時候就需要動態載入，在確定需要使用的時候載入</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export let go = () =&gt; {
</span><span class='line'>  return 'AAA';
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>async () =&gt; {
</span><span class='line'>  let Module = await import('./Module.js');
</span><span class='line'>  console.log(Module.go());
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>輸出</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>AAA</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
