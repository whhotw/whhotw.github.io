<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wenhao's Worklog]]></title>
  <link href="http://whhotw.github.io/atom.xml" rel="self"/>
  <link href="http://whhotw.github.io/"/>
  <updated>2017-10-05T11:35:29+08:00</updated>
  <id>http://whhotw.github.io/</id>
  <author>
    <name><![CDATA[Wenhao Ho]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ignore Self Signed Cert on React-Native App]]></title>
    <link href="http://whhotw.github.io/blog/2017/10/05/ignore-self-signed-cert-on-react-native-app/"/>
    <updated>2017-10-05T11:06:00+08:00</updated>
    <id>http://whhotw.github.io/blog/2017/10/05/ignore-self-signed-cert-on-react-native-app</id>
    <content type="html"><![CDATA[<p><img src="../assets/Simulator%20Screen%20Shot%20Oct%205%2C%202017%2C%2011.19.10%20AM.png" width="360" height="640"></p>

<p>RN 裡面是不接受自簽憑證的，但是往往在開發環境中，有些時候還是會用到自簽憑證，這時候就會變得很麻煩，因為寫程式的時候等於不能跑在測試環境，這時候就可以新增 <code>NSURLRequest</code> 的 category 讓網路連線可以通過 <code>https</code> 的錯誤</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+ (BOOL)allowsAnyHTTPSCertificateForHost:(NSString *)host {
</span><span class='line'>  return YES;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How About Push Large Size File to Git]]></title>
    <link href="http://whhotw.github.io/blog/2017/09/29/how-about-push-large-size-file-to-git/"/>
    <updated>2017-09-29T10:36:15+08:00</updated>
    <id>http://whhotw.github.io/blog/2017/09/29/how-about-push-large-size-file-to-git</id>
    <content type="html"><![CDATA[<p>想要上傳超過 100MB 的檔案到 Git 被 rejected 的解法</p>

<h3>安裝</h3>

<p><code>brew install git-lfs</code></p>

<h3>操作</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ${project}
</span><span class='line'>git lfs install
</span><span class='line'>git lfs track "*.ext" =&gt; 依副檔名
</span><span class='line'>git lfs track "*/**" =&gt; 依資料夾
</span><span class='line'>git add file.ext
</span><span class='line'>git commit -m "something..."
</span><span class='line'>git push origin master</span></code></pre></td></tr></table></div></figure>


<p>關鍵是 <code>track</code> 某個檔案或是資料夾，可以利用 <code>git lfs ls-files</code> 查看哪些檔案被追蹤</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git lfs ls-files
</span><span class='line'>74015d7b01 * src/ios/xxx</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JS RSA 加密/簽名]]></title>
    <link href="http://whhotw.github.io/blog/2017/09/26/js-rsa-jia-mi-slash-qian-ming/"/>
    <updated>2017-09-26T11:14:39+08:00</updated>
    <id>http://whhotw.github.io/blog/2017/09/26/js-rsa-jia-mi-slash-qian-ming</id>
    <content type="html"><![CDATA[<p>大致上的流程就是伺服端生成公私鑰對後，將公鑰儲存在前端。登入時利用公鑰將敏感資料加密傳送給後端。通常我會習慣轉成 base64 後才傳給後端</p>

<p>先安裝 <code>jsrsasign</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import rs from 'jsrsasign';
</span><span class='line'>
</span><span class='line'>let pub = rs.KEYUTIL.getKey(file);
</span><span class='line'>let cipher = rs.KJUR.crypto.Cipher.encrypt(this.state.passwd, pub, 'RSA');
</span><span class='line'>return rs.hextob64(cipher);</span></code></pre></td></tr></table></div></figure>


<p>getKey() 裡面放要使用的鑰匙資訊，像我是透過 <code>pem</code> 所以會從檔案中把資訊取出來。 可以使用 <code>react-native-fs</code> 存取檔案系統</p>

<p>一開始以為可以透過類似讀圖片的方式 <code>require('url')</code> 得到憑證檔案，因為自己的想法是，假如要先手動把一些自定義的檔案放入個別的系統，真的很麻煩。經過了一個下午的努力與 google 的結果，似乎除了圖片目前還沒有自動連結實體檔案的方法，下次有時間研究一下 <code>rnpm link</code> 是怎麼做的！雖然是針對套件不過應該可以自己寫個 script 解決我這個問題</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Native - 讓安卓返回鍵失效]]></title>
    <link href="http://whhotw.github.io/blog/2017/09/20/react-native-rang-an-zhuo-fan-hui-jian-shi-xiao/"/>
    <updated>2017-09-20T17:28:47+08:00</updated>
    <id>http://whhotw.github.io/blog/2017/09/20/react-native-rang-an-zhuo-fan-hui-jian-shi-xiao</id>
    <content type="html"><![CDATA[<p>設定 <code>overrideBackPress=true</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>this.props.navigator.showLightBox({
</span><span class='line'>    screen: '',
</span><span class='line'>    passProps: {},
</span><span class='line'>    style: {},
</span><span class='line'>    overrideBackPress: true
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Local Plugin to Cordova Project]]></title>
    <link href="http://whhotw.github.io/blog/2017/09/14/install-local-plugin-to-cordova-project/"/>
    <updated>2017-09-14T17:35:19+08:00</updated>
    <id>http://whhotw.github.io/blog/2017/09/14/install-local-plugin-to-cordova-project</id>
    <content type="html"><![CDATA[<p>use it.
<code>plugman install --platform ios --project path/to/your/ionicapp/platforms/android --plugin /Path/to/your/cordova-plugin/MyDemo/</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Native - Setting onMessage on a WebView Overrides Existing Values of window.postMessage]]></title>
    <link href="http://whhotw.github.io/blog/2017/09/13/react-native-setting-onmessage-on-a-webview-overrides-existing-values-of-window-dot-postmessage/"/>
    <updated>2017-09-13T15:56:07+08:00</updated>
    <id>http://whhotw.github.io/blog/2017/09/13/react-native-setting-onmessage-on-a-webview-overrides-existing-values-of-window-dot-postmessage</id>
    <content type="html"><![CDATA[<p>最近在玩 React Native 遇到的一個問題。假如想讓 WebView 與 React Native 溝通的話可以用 <code>onMessage</code> 這個介面，但是假如原本的網頁內容你不確定怎麼寫的，可能會遇到 <code>Setting onMessage on a WebView overrides existing values of window.postMessage</code>
這樣的錯誤訊息，搜尋了一下解法，紀錄一下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const patchPostMessageFunction = () =&gt; {
</span><span class='line'>  const originalPostMessage = window.postMessage;
</span><span class='line'>
</span><span class='line'>  const patchedPostMessage = (message, targetOrigin, transfer) =&gt; {
</span><span class='line'>    originalPostMessage(message, targetOrigin, transfer);
</span><span class='line'>  };
</span><span class='line'>
</span><span class='line'>  patchedPostMessage.toString = () =&gt; String(Object.hasOwnProperty).replace('hasOwnProperty', 'postMessage');
</span><span class='line'>
</span><span class='line'>  window.postMessage = patchedPostMessage;
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>const patchPostMessageJsCode = `(${String(patchPostMessageFunction)})();`;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript Singleton]]></title>
    <link href="http://whhotw.github.io/blog/2017/09/12/javascript-singleton/"/>
    <updated>2017-09-12T09:52:10+08:00</updated>
    <id>http://whhotw.github.io/blog/2017/09/12/javascript-singleton</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static instance = null;
</span><span class='line'>static createInstance() {
</span><span class='line'>  return new Class();
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>static getInstance() {
</span><span class='line'>  if (!Class.instance) {
</span><span class='line'>      Class.instance = Class.createInstance();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  return Class.instance;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Promise]]></title>
    <link href="http://whhotw.github.io/blog/2017/09/08/promise/"/>
    <updated>2017-09-08T14:14:37+08:00</updated>
    <id>http://whhotw.github.io/blog/2017/09/08/promise</id>
    <content type="html"><![CDATA[<p>最早是在社群提出，但 <code>ES6</code> 推出後就被列入標準了，原生提供 <code>Promise</code> 對象，讓前端工程師處理非同步問題。例如：下載網路上的圖片之後顯示。</p>

<h1>基本用法</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var promise = new Promise(function(resolve, reject) {
</span><span class='line'>  // ... some code
</span><span class='line'>
</span><span class='line'>  if (true){
</span><span class='line'>    resolve(value);
</span><span class='line'>  } else {
</span><span class='line'>    reject(error);
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSX 上解決 Port 被使用的問題]]></title>
    <link href="http://whhotw.github.io/blog/2017/09/07/osx-shang-jie-jue-port-bei-shi-yong-de-wen-ti/"/>
    <updated>2017-09-07T10:18:55+08:00</updated>
    <id>http://whhotw.github.io/blog/2017/09/07/osx-shang-jie-jue-port-bei-shi-yong-de-wen-ti</id>
    <content type="html"><![CDATA[<p>在開發的時候會需要開一些服務，來幫助除錯或是測試程式，但有時候會遇到無法正常啟動的問題，這時候可以檢查看看是不是舊服務把 port 佔住，導致新的服務開不起來，可以使用 <code>lsof(list open files)</code> 這個指令檢查一下把不要的服務 kill</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lsof -t -i:${PORT}
</span><span class='line'>kill -9 $(lsof -t -i:${PORT})</span></code></pre></td></tr></table></div></figure>


<h5>-i 顯示所有端口<br/>-i:${PORT} 顯示指定端口<br/>-t 只印出 PID</h5>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First React Native App]]></title>
    <link href="http://whhotw.github.io/blog/2017/09/06/first-react-native-app/"/>
    <updated>2017-09-06T14:49:07+08:00</updated>
    <id>http://whhotw.github.io/blog/2017/09/06/first-react-native-app</id>
    <content type="html"><![CDATA[<h1>快速建立一個 React-Native App</h1>

<h3>Install create-react-native-app</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g create-react-native-app</span></code></pre></td></tr></table></div></figure>


<h3>Create React Native App</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>create-react-native-app ${ProjectName}
</span><span class='line'>cd ${ProjectName}
</span><span class='line'>npm run ios(or android)</span></code></pre></td></tr></table></div></figure>


<h1>建立一個 React-Native App</h1>

<h3>Install react-native-cli</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g react-native-cli</span></code></pre></td></tr></table></div></figure>


<h3>Init &amp; Run Project</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>react-native init ${ProjectName}
</span><span class='line'>cd ${ProjectName}
</span><span class='line'>react-native run-ios(or -anroid)</span></code></pre></td></tr></table></div></figure>


<blockquote><p>remind: stop apache</p></blockquote>

<h1>常用的第三方套件</h1>

<h3>Install &amp; Import react-native-vector-icons</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install --save react-native-vector-icons
</span><span class='line'>npm install -g rnpm
</span><span class='line'>rnpm link
</span><span class='line'>
</span><span class='line'>import Icon from 'react-native-vector-icons/Ionicons';</span></code></pre></td></tr></table></div></figure>


<blockquote><p>react-native-i18n: 多語系<br/>
react-native-keychain: 帳密處理<br/>
react-native-navigation: 導覽列佈局<br/>
react-native-vector-icons: 圖資源<br/></p></blockquote>
]]></content>
  </entry>
  
</feed>
